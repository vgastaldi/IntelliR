counts[[length(counts) + 1]] <- hold_wc$CI_low
results_df[grepl("A|C",results_df$Group),] -> ef_df
ef_df$Group <- droplevels(ef_df$Group)
effectsize::cliffs_delta(ef_df[,variable] ~ ef_df[,"Group"]) -> hold_wc
counts[[length(counts) + 1]] <- hold_wc$r_rank_biserial
counts[[length(counts) + 1]] <- hold_wc$CI_high
counts[[length(counts) + 1]] <- hold_wc$CI_low
results_df[grepl("A|D",results_df$Group),] -> ef_df
ef_df$Group <- droplevels(ef_df$Group)
effectsize::cliffs_delta(ef_df[,variable] ~ ef_df[,"Group"]) -> hold_wc
counts[[length(counts) + 1]] <- hold_wc$r_rank_biserial
counts[[length(counts) + 1]] <- hold_wc$CI_high
counts[[length(counts) + 1]] <- hold_wc$CI_low
results_df[grepl("B|C",results_df$Group),] -> ef_df
ef_df$Group <- droplevels(ef_df$Group)
effectsize::cliffs_delta(ef_df[,variable] ~ ef_df[,"Group"]) -> hold_wc
counts[[length(counts) + 1]] <- hold_wc$r_rank_biserial
counts[[length(counts) + 1]] <- hold_wc$CI_high
counts[[length(counts) + 1]] <- hold_wc$CI_low
results_df[grepl("B|D",results_df$Group),] -> ef_df
ef_df$Group <- droplevels(ef_df$Group)
effectsize::cliffs_delta(ef_df[,variable] ~ ef_df[,"Group"]) -> hold_wc
counts[[length(counts) + 1]] <- hold_wc$r_rank_biserial
counts[[length(counts) + 1]] <- hold_wc$CI_high
counts[[length(counts) + 1]] <- hold_wc$CI_low
results_df[grepl("C|D",results_df$Group),] -> ef_df
ef_df$Group <- droplevels(ef_df$Group)
effectsize::cliffs_delta(ef_df[,variable] ~ ef_df[,"Group"]) -> hold_wc
counts[[length(counts) + 1]] <- hold_wc$r_rank_biserial
counts[[length(counts) + 1]] <- hold_wc$CI_high
counts[[length(counts) + 1]] <- hold_wc$CI_low
} else {
# If at least one group is not normally distributed and the variances are unequal
counts[[length(counts) + 1]] <- "Asymptotic K-Sample Fisher-Pitman Permutation Test"
counts[[length(counts) + 1]] <- pvalue(oneway_test(results_df[,variable]~as.factor(results_df[,"Group"])))
counts[[length(counts) + 1]] <- "Chi-squared"
counts[[length(counts) + 1]] <- statistic(oneway_test(results_df[,variable]~as.factor(results_df[,"Group"])))
counts[[length(counts) + 1]] <- "No global effect size test"
counts[[length(counts) + 1]] <- NA
counts[[length(counts) + 1]] <- NA
counts[[length(counts) + 1]] <- NA
# fit a linear model
factor(results_df[,"Group"]) -> group
fit <- lm(results_df[,variable]~ group, data=results_df)
# specify the contrasts
contrasts <- rbind(c(-1, 1, 0, 0),
c(-1, 0, 1, 0),
c(-1, 0, 0, 1),
c(0, -1, 1, 0),
c(0, -1, 0, 1),
c(0, 0, -1, 1))
# Assign row names
rownames(contrasts) <- c(paste0("A"," vs ","B"),
paste0("A"," vs ","C"),
paste0("A"," vs ","D"),
paste0("B"," vs ","C"),
paste0("B"," vs ","D"),
paste0("C"," vs ","D"))
# Perform a contrast test as the post-hoc test extracting p-values and T-value statistic
summary(glht(fit, linfct = mcp(group = contrasts), alternative = "two.sided"), test = adjusted(type = "bonferroni")) -> comparison
counts[[length(counts) + 1]] <- "Simultaneous Tests for General Linear Hypotheses - Multiple Comparisons of Means"
counts[[length(counts) + 1]] <- "T-values"
counts[[length(counts) + 1]] <- comparison$test$pvalues[1]
counts[[length(counts) + 1]] <- comparison$test$tstat[1]
counts[[length(counts) + 1]] <- comparison$test$pvalues[2]
counts[[length(counts) + 1]] <- comparison$test$tstat[2]
counts[[length(counts) + 1]] <- comparison$test$pvalues[3]
counts[[length(counts) + 1]] <- comparison$test$tstat[3]
counts[[length(counts) + 1]] <- comparison$test$pvalues[4]
counts[[length(counts) + 1]] <- comparison$test$tstat[4]
counts[[length(counts) + 1]] <- comparison$test$pvalues[5]
counts[[length(counts) + 1]] <- comparison$test$tstat[5]
counts[[length(counts) + 1]] <- comparison$test$pvalues[6]
counts[[length(counts) + 1]] <- comparison$test$tstat[6]
# Calculating effect sizes for the post-hoc comparisons
(em <- emmeans(fit, specs = ~ group))
eff_size(em, sigma = sigma(fit), edf = df.residual(fit)) -> hold_eff
hold_eff <- summary(hold_eff)
counts[[length(counts) + 1]] <- "Standardized mean difference between groups - Hedges'g"
counts[[length(counts) + 1]] <- hold_eff[1,2]
counts[[length(counts) + 1]] <- hold_eff[1,6]
counts[[length(counts) + 1]] <- hold_eff[1,5]
counts[[length(counts) + 1]] <- hold_eff[2,2]
counts[[length(counts) + 1]] <- hold_eff[2,6]
counts[[length(counts) + 1]] <- hold_eff[2,5]
counts[[length(counts) + 1]] <- hold_eff[3,2]
counts[[length(counts) + 1]] <- hold_eff[3,6]
counts[[length(counts) + 1]] <- hold_eff[3,5]
counts[[length(counts) + 1]] <- hold_eff[4,2]
counts[[length(counts) + 1]] <- hold_eff[4,6]
counts[[length(counts) + 1]] <- hold_eff[4,5]
counts[[length(counts) + 1]] <- hold_eff[5,2]
counts[[length(counts) + 1]] <- hold_eff[5,6]
counts[[length(counts) + 1]] <- hold_eff[5,5]
counts[[length(counts) + 1]] <- hold_eff[6,2]
counts[[length(counts) + 1]] <- hold_eff[6,6]
counts[[length(counts) + 1]] <- hold_eff[6,5]
}
}
}
results_stats[nrow(results_stats) + 1,] <- counts
bckp -> results_df
rm(counts,fit,contrasts,comparison)
}
}
write.xlsx(results_stats,paste("statistics_",project,".xlsx",sep=""),colNames = T,rowNames = F,keepNA = F)
View(results_stats)
#### Statistics for corner preference ####
corner_stats <- NULL
for (variable in seq(3,110,4)){
results_corner[,c(1,2,variable,variable+1,variable+2,variable+3)] -> subset_corner
colnames(subset_corner)[3:6] <- c("Corner1","Corner2","Corner3","Corner4")
if(sum(is.na(subset_corner[,3])) == nrow(subset_corner)){
next()
} else {
df_long <- pivot_longer(subset_corner, cols = c("Corner1", "Corner2", "Corner3", "Corner4"), names_to = "Corner", values_to = "Proportion")
df_long %>%
group_by(Group) %>%
summarise(p.value = friedman.test(Proportion ~ Corner | ID)$p.value) -> hold_corner_stats
hold_corner_stats$Variable <- gsub("Corner[0-9]","Corner_",colnames(results_corner)[variable])
rbind(corner_stats,hold_corner_stats) -> corner_stats
}
}
write.xlsx(corner_stats,paste("corner_statistics_",project,".xlsx",sep=""),colNames = T,rowNames = F,keepNA = F)
#### Learning Curves ####
DA_progression <- NULL
visits_objects <- ls(pattern = "_visits$")
for (animal in all_animals) {
# Iterate through all the challenges
for (visits_object in visits_objects) {
# Get the current challenge
visits_df <- get(visits_object)
# Subset the data frame based on each individual animal
subset_df <- subset(visits_df, Animal == animal & NosepokeNumber > 0 & Light_Status == "Dark")
# Progression
if(nrow(subset_df) > 0){
row.names(subset_df) <- NULL
df <- data.frame(ID = animal, Number_DAs = 1, Success_DAs = 0, Challenge = gsub("_visits","",visits_object))
if(subset_df[which(row.names(subset_df) == 1),"CornerCondition"] == "Correct"){
df$Success_DAs <- 1
}
for (row in 2:nrow(subset_df)){
df[nrow(df)+1,] <- c(animal,df[nrow(df),2],df[nrow(df),3],gsub("_visits","",visits_object))
df[c(2,3)] <- lapply(df[c(2,3)], as.numeric)
df[nrow(df),"Number_DAs"] <- df[nrow(df),"Number_DAs"] + 1
if(subset_df[which(row.names(subset_df) == row),"CornerCondition"] == "Correct"){
df[nrow(df),"Success_DAs"] <- df[nrow(df),"Success_DAs"]+1
}
}
rbind(DA_progression,df) -> DA_progression
} else {
df <- data.frame(ID = animal, Number_DAs = 0, Success_DAs = 0, Challenge = gsub("_visits","",visits_object))
rbind(DA_progression,df) -> DA_progression
}
}
}
DA_progression$Success_DAs/DA_progression$Number_DAs -> DA_progression$Ongoing_Success
DA_progression[!is.nan(DA_progression$Ongoing_Success),] -> DA_progression
DA_progression[!grepl("Extinction",DA_progression$Challenge),] -> DA_progression
DA_progression[!grepl("Habituation",DA_progression$Challenge),] -> DA_progression
DA_progression[!is.nan(DA_progression$Ongoing_Success),] -> DA_progression
merge(DA_progression,unblinding,by.x = 1,by.y = 1) -> DA_progression
slope <- 0.25
intercept <- 0
all_comparisons_set <- NULL
all_comparisons_set_EM <- NULL
for (i in unique(DA_progression$Challenge)){
DA_progression[which(DA_progression$Challenge == i),] -> df
df[which(df$Number_DAs <= 100),] -> df
# Generate the y-values for the artificial line directly using the desired slope and intercept
artificial_data <- data.frame(ID = "dummy", Number_DAs = seq(1, max(df$Number_DAs), length.out = max(df$Number_DAs)))
artificial_data$Success_DAs <- intercept + slope * artificial_data$Number_DAs
artificial_data$Challenge <- i
artificial_data$Ongoing_Success <- artificial_data$Success_DAs/artificial_data$Number_DAs
artificial_data$Group <- "dummy"
rbind(df,artificial_data) -> df
as.factor(df$Group) -> df$Group
# Perform an ANCOVA
ancova <- aov(Success_DAs ~ Number_DAs * Group, data = df)
summary(emmeans(ancova, pairwise ~ Number_DAs:Group, at = list(Number_DAs = c(100)))) -> posthoc
posthoc_df <- posthoc$contrasts[, c("contrast","estimate", "p.value")]
posthoc_df$Challenge <- i
posthoc$emmeans -> emmeans_df
emmeans_df$Challenge <- i
rbind(all_comparisons_set,posthoc_df) -> all_comparisons_set
rbind(all_comparisons_set_EM,emmeans_df) -> all_comparisons_set_EM
}
gsub("Number_DAs100 ","",all_comparisons_set$contrast) -> all_comparisons_set$contrast
as.character(all_comparisons_set$p.value) -> all_comparisons_set$p.value
all_comparisons_set$p.value[all_comparisons_set$p.value == "0"] <- "<2e-16"
openxlsx::write.xlsx(all_comparisons_set,"all_comparisons_set.xlsx")
openxlsx::write.xlsx(all_comparisons_set_EM,"all_comparisons_set_EM.xlsx")
#### Plotting ####
## Going to the correct folder
dir.create(paste(results_folder,project,"figures",sep = "/"))
setwd(paste(results_folder,project,"figures",sep = "/"))
if(length(grep("^group[0-9]+_name$", ls(envir = globalenv()))) == 4){
colors <- c(group1_color,group2_color,group3_color,group4_color)
} else {
colors <- c(group1_color,group2_color)
}
#### General statistics ####
if(length(grep("^group[0-9]+_name$", ls(envir = globalenv()))) == 4){
for (variable in 3:ncol(results_df)){
results_df[,c(1,2,variable)] -> df
colnames(df)[3] <- "Variable1"
measurement_plotted <- colnames(results_df)[variable]
# Remove rows with NAs in Variable1
df <- df %>% filter(!is.na(Variable1))
if(nrow(df) == 0){
next()
} else {
# Create a named vector with the desired mapping
group_map <- setNames(c(1, 2, 3, 4), c(get("group1_name"), get("group2_name"), get("group3_name"), get("group4_name")))
# Use the match function to find the index of the Group column values in the group_map vector
df$Group <- match(df$Group, names(group_map))
# Use the as.numeric function to convert the index values into numeric values
df$Group <- as.numeric(df$Group)
# Create a new column for group name
df <- df %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Group by Group and calculate mean and standard deviation of Variable1
df_summary <- df %>%
group_by(Group) %>%
summarize(mean = mean(Variable1), sd = sd(Variable1))
# Create a new column for group color
df_summary <- df_summary %>%
rowwise() %>%
mutate(color = get(paste0("group", as.numeric(Group), "_color"))) %>%
ungroup()
# Create a new column for group name
df_summary <- df_summary %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Calculate the y position of the comparison bars
y_pos <- max(df_summary$mean + df_summary$sd) * 1.05 # Set y position of comparison bars to 10% above maximum value
# Set the spacing between the comparison bars
spacing <- max(df_summary$mean + df_summary$sd) * 0.04 # Set spacing between comparison bars to 15% of maximum value
# Get the p-values from the stats table
as.numeric(results_stats[which(results_stats$Variable == measurement_plotted),c(29,31,33,35,37,39)]) -> p_values
if (!is.na(p_values)[1]){
# Define a function to format the p-value annotations
format_pvalue <- function(p) {
if (p >= 0.001 & p <= 0.05) {
return(paste0("bold('p = ", round(p, digits = 3), "')"))
} else if (p < 0.001){
return(paste0("bold('p < 0.001')"))
} else if (p < 1 & p > 0.05) {
return(paste0("'p = ", round(p, digits = 3), "'"))
} else {
return("'p > 0.999'")
}
}
df_summary$name <- factor(df_summary$name,levels = c(group1_name,group2_name,group3_name,group4_name))
# Plot the data using ggplot
p <- ggplot(df_summary, aes(x = name, y = mean, fill = name)) +
# Add the bars
geom_bar(stat = "identity", position = position_dodge(), color="black") + # Add black outline around bars
# Add the error bars
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = .2, position = position_dodge(.9)) +
# Add the dots representing the individual observations
geom_point(data=df,aes(x=name,y=Variable1),position=position_jitter(width=0.2,height=0),size=3)+
# Set the fill scale manually
scale_fill_manual(values = unique(df_summary$color), labels = unique(df_summary$name)) +
scale_color_manual(values = unique(df_summary$color), labels = unique(df_summary$name)) +
# Add comparison bars and p-value annotations for each pair of groups you want to compare
geom_segment(aes(x=1,xend=2,y=y_pos,yend=y_pos))+
annotate("text",x=mean(c(1,2)),y=y_pos+spacing/2,label=format_pvalue(p_values[1]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=1,xend=3,y=y_pos+spacing,yend=y_pos+spacing))+
annotate("text",x=mean(c(1,3)),y=y_pos+spacing+spacing/2,label=format_pvalue(p_values[2]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=1,xend=4,y=y_pos+spacing*2,yend=y_pos+spacing*2))+
annotate("text",x=mean(c(1,4)),y=y_pos+spacing*2+spacing/2,label=format_pvalue(p_values[3]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=2,xend=3,y=y_pos+spacing*3,yend=y_pos+spacing*3))+
annotate("text",x=mean(c(2,3)),y=y_pos+spacing*3+spacing/2,label=format_pvalue(p_values[4]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=2,xend=4,y=y_pos+spacing*4,yend=y_pos+spacing*4))+
annotate("text",x=mean(c(2,4)),y=y_pos+spacing*4+spacing/2,label=format_pvalue(p_values[5]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=3,xend=4,y=y_pos+spacing*5,yend=y_pos+spacing*5))+
annotate("text",x=mean(c(3,4)),y=y_pos+spacing*5+spacing/2,label=format_pvalue(p_values[6]),parse=T,size=4)+ # Increase size of p-value text
theme_minimal()+ # Apply theme_minimal()
theme(axis.title.x=element_blank(), # Suppress the X axis label
axis.title.y=element_text(size=14,face="bold"), # Increase size of Y axis label and make it bold
axis.text=element_text(size=12), # Increase size of axis text
axis.text.x = element_text(face = "bold"), # Make the group names bold
legend.position="none", # Suppress the legend
panel.grid.major.x = element_blank()) + # Remove background vertical lines
ylab(measurement_plotted) # Set the Y axis label to the value of measurement_plotted
ggsave(paste(measurement_plotted,".png",sep = ""), p, width = 10, height = 10, dpi = 600)
} else {
next()
}
}
}
} else if (length(grep("^group[0-9]+_name$", ls(envir = globalenv()))) == 3) {
for (variable in 3:ncol(results_df)){
results_df[,c(1,2,variable)] -> df
colnames(df)[3] <- "Variable1"
measurement_plotted <- colnames(results_df)[variable]
# Remove rows with NAs in Variable1
df <- df %>% filter(!is.na(Variable1))
if(nrow(df) == 0){
next()
} else {
# Create a named vector with the desired mapping
group_map <- setNames(c(1, 2, 3), c(get("group1_name"), get("group2_name"), get("group3_name")))
# Use the match function to find the index of the Group column values in the group_map vector
df$Group <- match(df$Group, names(group_map))
# Use the as.numeric function to convert the index values into numeric values
df$Group <- as.numeric(df$Group)
# Create a new column for group name
df <- df %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Group by Group and calculate mean and standard deviation of Variable1
df_summary <- df %>%
group_by(Group) %>%
summarize(mean = mean(Variable1), sd = sd(Variable1))
# Create a new column for group color
df_summary <- df_summary %>%
rowwise() %>%
mutate(color = get(paste0("group", as.numeric(Group), "_color"))) %>%
ungroup()
# Create a new column for group name
df_summary <- df_summary %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Calculate the y position of the comparison bars
y_pos <- max(df_summary$mean + df_summary$sd) * 1.05 # Set y position of comparison bars to 10% above maximum value
# Set the spacing between the comparison bars
spacing <- max(df_summary$mean + df_summary$sd) * 0.04 # Set spacing between comparison bars to 15% of maximum value
# Get the p-values from the stats table
as.numeric(results_stats[which(results_stats$Variable == measurement_plotted),c(25,27,29)]) -> p_values
if (!is.na(p_values)[1]){
# Define a function to format the p-value annotations
format_pvalue <- function(p) {
if (p >= 0.001 & p <= 0.05) {
return(paste0("bold('p = ", round(p, digits = 3), "')"))
} else if (p < 0.001){
return(paste0("bold('p < 0.001')"))
} else if (p < 1 & p > 0.05) {
return(paste0("'p = ", round(p, digits = 3), "'"))
} else {
return("'p > 0.999'")
}
}
df_summary$name <- factor(df_summary$name,levels = c(group1_name,group2_name,group3_name))
# Plot the data using ggplot
p <- ggplot(df_summary, aes(x = name, y = mean, fill = name)) +
# Add the bars
geom_bar(stat = "identity", position = position_dodge(), color="black") + # Add black outline around bars
# Add the error bars
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = .2, position = position_dodge(.9)) +
# Add the dots representing the individual observations
geom_point(data=df,aes(x=name,y=Variable1),position=position_jitter(width=0.2,height=0),size=3)+
# Set the fill scale manually
scale_fill_manual(values = unique(df_summary$color), labels = unique(df_summary$name)) +
scale_color_manual(values = unique(df_summary$color), labels = unique(df_summary$name)) +
# Add comparison bars and p-value annotations for each pair of groups you want to compare
geom_segment(aes(x=1,xend=2,y=y_pos,yend=y_pos))+
annotate("text",x=mean(c(1,2)),y=y_pos+spacing/2,label=format_pvalue(p_values[1]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=1,xend=3,y=y_pos+spacing,yend=y_pos+spacing))+
annotate("text",x=mean(c(1,3)),y=y_pos+spacing+spacing/2,label=format_pvalue(p_values[2]),parse=T,size=4)+ # Increase size of p-value text
geom_segment(aes(x=1,xend=4,y=y_pos+spacing*2,yend=y_pos+spacing*2))+
annotate("text",x=mean(c(1,4)),y=y_pos+spacing*2+spacing/2,label=format_pvalue(p_values[3]),parse=T,size=4)+ # Increase size of p-value text
theme_minimal()+ # Apply theme_minimal()
theme(axis.title.x=element_blank(), # Suppress the X axis label
axis.title.y=element_text(size=14,face="bold"), # Increase size of Y axis label and make it bold
axis.text=element_text(size=12), # Increase size of axis text
axis.text.x = element_text(face = "bold"), # Make the group names bold
legend.position="none", # Suppress the legend
panel.grid.major.x = element_blank()) + # Remove background vertical lines
ylab(measurement_plotted) # Set the Y axis label to the value of measurement_plotted
ggsave(paste(measurement_plotted,".png",sep = ""), p, width = 10, height = 10, dpi = 600)
} else {
next()
}
}
}
} else {
for (variable in 3:ncol(results_df)){
results_df[,c(1,2,variable)] -> df
colnames(df)[3] <- "Variable1"
measurement_plotted <- colnames(results_df)[variable]
# Assuming your data frame is called df
# Remove rows with NAs in Variable1
df <- df %>% filter(!is.na(Variable1))
if (nrow(df) == 0){
next()
} else {
# Create a named vector with the desired mapping
group_map <- setNames(c(1, 2), c(get("group1_name"), get("group2_name")))
# Use the match function to find the index of the Group column values in the group_map vector
df$Group <- match(df$Group, names(group_map))
# Use the as.numeric function to convert the index values into numeric values
df$Group <- as.numeric(df$Group)
# Create a new column for group name
df <- df %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Group by Group and calculate mean and standard deviation of Variable1
df_summary <- df %>%
group_by(Group) %>%
summarize(mean = mean(Variable1), sd = sd(Variable1))
# Create a new column for group color
df_summary <- df_summary %>%
rowwise() %>%
mutate(color = get(paste0("group", as.numeric(Group), "_color"))) %>%
ungroup()
# Create a new column for group name
df_summary <- df_summary %>%
rowwise() %>%
mutate(name = get(paste0("group", as.numeric(Group), "_name"))) %>%
ungroup()
# Calculate the y position of the comparison bars
y_pos <- max(df_summary$mean + df_summary$sd) * 1.05 # Set y position of comparison bars to 10% above maximum value
# Set the spacing between the comparison bars
spacing <- max(df_summary$mean + df_summary$sd) * 0.04 # Set spacing between comparison bars to 15% of maximum value
# Get the p-values from the stats table
as.numeric(results_stats[which(results_stats$Variable == measurement_plotted),12]) -> p_values
if (!is.na(p_values)){
# Define a function to format the p-value annotations
format_pvalue <- function(p) {
if (p >= 0.001 & p <= 0.05) {
return(paste0("bold('p = ", round(p, digits = 3), "')"))
} else if (p < 0.001){
return(paste0("bold('p < 0.001')"))
} else if (p < 1 & p > 0.05) {
return(paste0("'p = ", round(p, digits = 3), "'"))
} else {
return("'p > 0.999'")
}
}
df_summary$name <- factor(df_summary$name,levels = c(group1_name,group2_name))
# Plot the data using ggplot
p <- ggplot(df_summary, aes(x = name, y = mean, fill = name)) +
# Add the bars
geom_bar(stat = "identity", position = position_dodge(), color="black") + # Add black outline around bars
# Add the error bars
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = .2, position = position_dodge(.9)) +
# Add the dots representing the individual observations
geom_point(data=df,aes(x=name,y=Variable1),position=position_jitter(width=0.2,height=0),size=4)+
# Set the fill scale manually
scale_fill_manual(values = setNames(unique(df_summary$color), unique(df_summary$name))) +
scale_color_manual(values = setNames(unique(df_summary$color), unique(df_summary$name))) +
# Add comparison bars and p-value annotations for each pair of groups you want to compare
geom_segment(aes(x=1,xend=2,y=y_pos,yend=y_pos))+
annotate("text",x=mean(c(1,2)),y=y_pos+spacing/2,label=format_pvalue(p_values[1]),parse=T,size=10)+ # Increase size of p-value text
theme_minimal()+ # Apply theme_minimal()
theme(axis.title.x=element_blank(), # Suppress the X axis label
axis.title.y=element_text(size=22,face="bold"), # Increase size of Y axis label and make it bold
axis.text=element_text(size=20), # Increase size of axis text
axis.text.x = element_text(face = "bold"), # Make the group names bold
legend.position="none", # Suppress the legend
panel.grid.major.x = element_blank()) + # Remove background vertical lines
ylab(measurement_plotted) # Set the Y axis label to the value of measurement_plotted
ggsave(paste(measurement_plotted,".png",sep = ""), p, width = 10, height = 10, dpi = 600) # Save the plot
}
}
}
}
#### Plots for corner preference ####
for (variable in seq(3,110,4)){
melt(results_corner[,c(1,variable,variable+1,variable+2,variable+3)]) -> melt_corner
p <- ggplot(melt_corner, aes(fill = variable, y = value, x = ID)) +   geom_bar(position = "stack", stat = "identity") +
scale_y_continuous(labels = scales::percent) +
labs(fill = "Corner", y = "Corner Preference") +
theme_minimal() +
theme(panel.grid.major = element_line(linewidth = 1)) +
theme(axis.text.x = element_text(angle = 90)) +
xlab(NULL) +
scale_fill_discrete(name = "Corner Preference", labels = c("Corner 1", "Corner 2", "Corner 3", "Corner 4"))
ggsave(paste(gsub("[0-9]Preference", "_Preference", colnames(results_corner)[variable]), "_",project,".png",sep=""),p,dpi = 600,width = 40,height = 15,units = "cm")
}
#### Plotting Learning curves ####
for (i in unique(DA_progression$Challenge)){
DA_progression[which(DA_progression$Challenge == i),] -> df
df[which(df$Number_DAs <= 100),] -> df
# Set the desired slope and intercept for the artificial line
slope <- 0.25
intercept <- 0 # You can change this value to set a different intercept
# Create a new data frame with the x-values for the artificial line
x_range <- range(df$Number_DAs)
artificial_data <- data.frame(Number_DAs = seq(x_range[1], x_range[2], length.out = max(df$Number_DAs)))
# Generate the y-values for the artificial line directly using the desired slope and intercept
artificial_data$Success_DAs <- intercept + slope * artificial_data$Number_DAs
# Create a line plot of Success_DAs vs Number_DAs, colored by Project and grouped by ID
p <- ggplot(df, aes(x = Number_DAs, y = Success_DAs, color = Group, group = ID)) +
geom_line(alpha = 0.65) +
geom_smooth(aes(group = Group),method = "lm", formula = y ~ x - 1, se = TRUE, level = 0.95, linewidth = 1.5, alpha = 0.8) + # aes(group = Project, fill = Project)
scale_color_manual(values = colors) +
geom_line(data = artificial_data, aes(x = Number_DAs, y = Success_DAs, group = NULL), color = "black", linetype = "dashed", linewidth = 1.5) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 102.5),breaks = seq(50, max(df$Number_DAs), by = 50)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA),breaks = seq(10, max(df$Success_DAs), by = 10)) +
theme_minimal() +
theme(
axis.title = element_text(size = 30, face = "bold"),
axis.text = element_text(size = 26),
plot.title = element_text(size = 1),
axis.line = element_line(),
axis.ticks = element_line(color = "black", linewidth = 0.5),
axis.ticks.length = unit(0.1, "cm")
) +
xlab("Drinking Attempts") +
ylab("Successful Drinking Attempts") +
labs(title = i) + theme(legend.position = "none")
ggsave(paste("learning_curve_",i,".png",sep = ""), p, width = 30, height = 25, units = "cm")
}
